/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.onplan.client.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-27")
public class VirtualMachineInfo implements org.apache.thrift.TBase<VirtualMachineInfo, VirtualMachineInfo._Fields>, java.io.Serializable, Cloneable, Comparable<VirtualMachineInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VirtualMachineInfo");

  private static final org.apache.thrift.protocol.TField AVAILABLE_PROCESSORS_FIELD_DESC = new org.apache.thrift.protocol.TField("availableProcessors", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMemory", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMemory", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FREE_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("freeMemory", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COLLECTIONS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionsCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField AVERAGE_COLLECTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("averageCollectionTime", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VirtualMachineInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VirtualMachineInfoTupleSchemeFactory());
  }

  public int availableProcessors; // optional
  public long maxMemory; // optional
  public long totalMemory; // optional
  public long freeMemory; // optional
  public long collectionsCount; // optional
  public double averageCollectionTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AVAILABLE_PROCESSORS((short)1, "availableProcessors"),
    MAX_MEMORY((short)2, "maxMemory"),
    TOTAL_MEMORY((short)3, "totalMemory"),
    FREE_MEMORY((short)4, "freeMemory"),
    COLLECTIONS_COUNT((short)5, "collectionsCount"),
    AVERAGE_COLLECTION_TIME((short)6, "averageCollectionTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AVAILABLE_PROCESSORS
          return AVAILABLE_PROCESSORS;
        case 2: // MAX_MEMORY
          return MAX_MEMORY;
        case 3: // TOTAL_MEMORY
          return TOTAL_MEMORY;
        case 4: // FREE_MEMORY
          return FREE_MEMORY;
        case 5: // COLLECTIONS_COUNT
          return COLLECTIONS_COUNT;
        case 6: // AVERAGE_COLLECTION_TIME
          return AVERAGE_COLLECTION_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AVAILABLEPROCESSORS_ISSET_ID = 0;
  private static final int __MAXMEMORY_ISSET_ID = 1;
  private static final int __TOTALMEMORY_ISSET_ID = 2;
  private static final int __FREEMEMORY_ISSET_ID = 3;
  private static final int __COLLECTIONSCOUNT_ISSET_ID = 4;
  private static final int __AVERAGECOLLECTIONTIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AVAILABLE_PROCESSORS,_Fields.MAX_MEMORY,_Fields.TOTAL_MEMORY,_Fields.FREE_MEMORY,_Fields.COLLECTIONS_COUNT,_Fields.AVERAGE_COLLECTION_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AVAILABLE_PROCESSORS, new org.apache.thrift.meta_data.FieldMetaData("availableProcessors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("maxMemory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("totalMemory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FREE_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("freeMemory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLLECTIONS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("collectionsCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVERAGE_COLLECTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("averageCollectionTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VirtualMachineInfo.class, metaDataMap);
  }

  public VirtualMachineInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VirtualMachineInfo(VirtualMachineInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.availableProcessors = other.availableProcessors;
    this.maxMemory = other.maxMemory;
    this.totalMemory = other.totalMemory;
    this.freeMemory = other.freeMemory;
    this.collectionsCount = other.collectionsCount;
    this.averageCollectionTime = other.averageCollectionTime;
  }

  public VirtualMachineInfo deepCopy() {
    return new VirtualMachineInfo(this);
  }

  @Override
  public void clear() {
    setAvailableProcessorsIsSet(false);
    this.availableProcessors = 0;
    setMaxMemoryIsSet(false);
    this.maxMemory = 0;
    setTotalMemoryIsSet(false);
    this.totalMemory = 0;
    setFreeMemoryIsSet(false);
    this.freeMemory = 0;
    setCollectionsCountIsSet(false);
    this.collectionsCount = 0;
    setAverageCollectionTimeIsSet(false);
    this.averageCollectionTime = 0.0;
  }

  public int getAvailableProcessors() {
    return this.availableProcessors;
  }

  public VirtualMachineInfo setAvailableProcessors(int availableProcessors) {
    this.availableProcessors = availableProcessors;
    setAvailableProcessorsIsSet(true);
    return this;
  }

  public void unsetAvailableProcessors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEPROCESSORS_ISSET_ID);
  }

  /** Returns true if field availableProcessors is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableProcessors() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEPROCESSORS_ISSET_ID);
  }

  public void setAvailableProcessorsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEPROCESSORS_ISSET_ID, value);
  }

  public long getMaxMemory() {
    return this.maxMemory;
  }

  public VirtualMachineInfo setMaxMemory(long maxMemory) {
    this.maxMemory = maxMemory;
    setMaxMemoryIsSet(true);
    return this;
  }

  public void unsetMaxMemory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMEMORY_ISSET_ID);
  }

  /** Returns true if field maxMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMemory() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMEMORY_ISSET_ID);
  }

  public void setMaxMemoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMEMORY_ISSET_ID, value);
  }

  public long getTotalMemory() {
    return this.totalMemory;
  }

  public VirtualMachineInfo setTotalMemory(long totalMemory) {
    this.totalMemory = totalMemory;
    setTotalMemoryIsSet(true);
    return this;
  }

  public void unsetTotalMemory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMEMORY_ISSET_ID);
  }

  /** Returns true if field totalMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMemory() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMEMORY_ISSET_ID);
  }

  public void setTotalMemoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMEMORY_ISSET_ID, value);
  }

  public long getFreeMemory() {
    return this.freeMemory;
  }

  public VirtualMachineInfo setFreeMemory(long freeMemory) {
    this.freeMemory = freeMemory;
    setFreeMemoryIsSet(true);
    return this;
  }

  public void unsetFreeMemory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEMEMORY_ISSET_ID);
  }

  /** Returns true if field freeMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeMemory() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEMEMORY_ISSET_ID);
  }

  public void setFreeMemoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEMEMORY_ISSET_ID, value);
  }

  public long getCollectionsCount() {
    return this.collectionsCount;
  }

  public VirtualMachineInfo setCollectionsCount(long collectionsCount) {
    this.collectionsCount = collectionsCount;
    setCollectionsCountIsSet(true);
    return this;
  }

  public void unsetCollectionsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTIONSCOUNT_ISSET_ID);
  }

  /** Returns true if field collectionsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTIONSCOUNT_ISSET_ID);
  }

  public void setCollectionsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTIONSCOUNT_ISSET_ID, value);
  }

  public double getAverageCollectionTime() {
    return this.averageCollectionTime;
  }

  public VirtualMachineInfo setAverageCollectionTime(double averageCollectionTime) {
    this.averageCollectionTime = averageCollectionTime;
    setAverageCollectionTimeIsSet(true);
    return this;
  }

  public void unsetAverageCollectionTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGECOLLECTIONTIME_ISSET_ID);
  }

  /** Returns true if field averageCollectionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageCollectionTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGECOLLECTIONTIME_ISSET_ID);
  }

  public void setAverageCollectionTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGECOLLECTIONTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AVAILABLE_PROCESSORS:
      if (value == null) {
        unsetAvailableProcessors();
      } else {
        setAvailableProcessors((Integer)value);
      }
      break;

    case MAX_MEMORY:
      if (value == null) {
        unsetMaxMemory();
      } else {
        setMaxMemory((Long)value);
      }
      break;

    case TOTAL_MEMORY:
      if (value == null) {
        unsetTotalMemory();
      } else {
        setTotalMemory((Long)value);
      }
      break;

    case FREE_MEMORY:
      if (value == null) {
        unsetFreeMemory();
      } else {
        setFreeMemory((Long)value);
      }
      break;

    case COLLECTIONS_COUNT:
      if (value == null) {
        unsetCollectionsCount();
      } else {
        setCollectionsCount((Long)value);
      }
      break;

    case AVERAGE_COLLECTION_TIME:
      if (value == null) {
        unsetAverageCollectionTime();
      } else {
        setAverageCollectionTime((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AVAILABLE_PROCESSORS:
      return getAvailableProcessors();

    case MAX_MEMORY:
      return getMaxMemory();

    case TOTAL_MEMORY:
      return getTotalMemory();

    case FREE_MEMORY:
      return getFreeMemory();

    case COLLECTIONS_COUNT:
      return getCollectionsCount();

    case AVERAGE_COLLECTION_TIME:
      return getAverageCollectionTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AVAILABLE_PROCESSORS:
      return isSetAvailableProcessors();
    case MAX_MEMORY:
      return isSetMaxMemory();
    case TOTAL_MEMORY:
      return isSetTotalMemory();
    case FREE_MEMORY:
      return isSetFreeMemory();
    case COLLECTIONS_COUNT:
      return isSetCollectionsCount();
    case AVERAGE_COLLECTION_TIME:
      return isSetAverageCollectionTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VirtualMachineInfo)
      return this.equals((VirtualMachineInfo)that);
    return false;
  }

  public boolean equals(VirtualMachineInfo that) {
    if (that == null)
      return false;

    boolean this_present_availableProcessors = true && this.isSetAvailableProcessors();
    boolean that_present_availableProcessors = true && that.isSetAvailableProcessors();
    if (this_present_availableProcessors || that_present_availableProcessors) {
      if (!(this_present_availableProcessors && that_present_availableProcessors))
        return false;
      if (this.availableProcessors != that.availableProcessors)
        return false;
    }

    boolean this_present_maxMemory = true && this.isSetMaxMemory();
    boolean that_present_maxMemory = true && that.isSetMaxMemory();
    if (this_present_maxMemory || that_present_maxMemory) {
      if (!(this_present_maxMemory && that_present_maxMemory))
        return false;
      if (this.maxMemory != that.maxMemory)
        return false;
    }

    boolean this_present_totalMemory = true && this.isSetTotalMemory();
    boolean that_present_totalMemory = true && that.isSetTotalMemory();
    if (this_present_totalMemory || that_present_totalMemory) {
      if (!(this_present_totalMemory && that_present_totalMemory))
        return false;
      if (this.totalMemory != that.totalMemory)
        return false;
    }

    boolean this_present_freeMemory = true && this.isSetFreeMemory();
    boolean that_present_freeMemory = true && that.isSetFreeMemory();
    if (this_present_freeMemory || that_present_freeMemory) {
      if (!(this_present_freeMemory && that_present_freeMemory))
        return false;
      if (this.freeMemory != that.freeMemory)
        return false;
    }

    boolean this_present_collectionsCount = true && this.isSetCollectionsCount();
    boolean that_present_collectionsCount = true && that.isSetCollectionsCount();
    if (this_present_collectionsCount || that_present_collectionsCount) {
      if (!(this_present_collectionsCount && that_present_collectionsCount))
        return false;
      if (this.collectionsCount != that.collectionsCount)
        return false;
    }

    boolean this_present_averageCollectionTime = true && this.isSetAverageCollectionTime();
    boolean that_present_averageCollectionTime = true && that.isSetAverageCollectionTime();
    if (this_present_averageCollectionTime || that_present_averageCollectionTime) {
      if (!(this_present_averageCollectionTime && that_present_averageCollectionTime))
        return false;
      if (this.averageCollectionTime != that.averageCollectionTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_availableProcessors = true && (isSetAvailableProcessors());
    list.add(present_availableProcessors);
    if (present_availableProcessors)
      list.add(availableProcessors);

    boolean present_maxMemory = true && (isSetMaxMemory());
    list.add(present_maxMemory);
    if (present_maxMemory)
      list.add(maxMemory);

    boolean present_totalMemory = true && (isSetTotalMemory());
    list.add(present_totalMemory);
    if (present_totalMemory)
      list.add(totalMemory);

    boolean present_freeMemory = true && (isSetFreeMemory());
    list.add(present_freeMemory);
    if (present_freeMemory)
      list.add(freeMemory);

    boolean present_collectionsCount = true && (isSetCollectionsCount());
    list.add(present_collectionsCount);
    if (present_collectionsCount)
      list.add(collectionsCount);

    boolean present_averageCollectionTime = true && (isSetAverageCollectionTime());
    list.add(present_averageCollectionTime);
    if (present_averageCollectionTime)
      list.add(averageCollectionTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(VirtualMachineInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAvailableProcessors()).compareTo(other.isSetAvailableProcessors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableProcessors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableProcessors, other.availableProcessors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMemory()).compareTo(other.isSetMaxMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMemory, other.maxMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMemory()).compareTo(other.isSetTotalMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMemory, other.totalMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreeMemory()).compareTo(other.isSetFreeMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freeMemory, other.freeMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectionsCount()).compareTo(other.isSetCollectionsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionsCount, other.collectionsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageCollectionTime()).compareTo(other.isSetAverageCollectionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageCollectionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageCollectionTime, other.averageCollectionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VirtualMachineInfo(");
    boolean first = true;

    if (isSetAvailableProcessors()) {
      sb.append("availableProcessors:");
      sb.append(this.availableProcessors);
      first = false;
    }
    if (isSetMaxMemory()) {
      if (!first) sb.append(", ");
      sb.append("maxMemory:");
      sb.append(this.maxMemory);
      first = false;
    }
    if (isSetTotalMemory()) {
      if (!first) sb.append(", ");
      sb.append("totalMemory:");
      sb.append(this.totalMemory);
      first = false;
    }
    if (isSetFreeMemory()) {
      if (!first) sb.append(", ");
      sb.append("freeMemory:");
      sb.append(this.freeMemory);
      first = false;
    }
    if (isSetCollectionsCount()) {
      if (!first) sb.append(", ");
      sb.append("collectionsCount:");
      sb.append(this.collectionsCount);
      first = false;
    }
    if (isSetAverageCollectionTime()) {
      if (!first) sb.append(", ");
      sb.append("averageCollectionTime:");
      sb.append(this.averageCollectionTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VirtualMachineInfoStandardSchemeFactory implements SchemeFactory {
    public VirtualMachineInfoStandardScheme getScheme() {
      return new VirtualMachineInfoStandardScheme();
    }
  }

  private static class VirtualMachineInfoStandardScheme extends StandardScheme<VirtualMachineInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VirtualMachineInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AVAILABLE_PROCESSORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.availableProcessors = iprot.readI32();
              struct.setAvailableProcessorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxMemory = iprot.readI64();
              struct.setMaxMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalMemory = iprot.readI64();
              struct.setTotalMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FREE_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.freeMemory = iprot.readI64();
              struct.setFreeMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLLECTIONS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.collectionsCount = iprot.readI64();
              struct.setCollectionsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AVERAGE_COLLECTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.averageCollectionTime = iprot.readDouble();
              struct.setAverageCollectionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VirtualMachineInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAvailableProcessors()) {
        oprot.writeFieldBegin(AVAILABLE_PROCESSORS_FIELD_DESC);
        oprot.writeI32(struct.availableProcessors);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxMemory()) {
        oprot.writeFieldBegin(MAX_MEMORY_FIELD_DESC);
        oprot.writeI64(struct.maxMemory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalMemory()) {
        oprot.writeFieldBegin(TOTAL_MEMORY_FIELD_DESC);
        oprot.writeI64(struct.totalMemory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFreeMemory()) {
        oprot.writeFieldBegin(FREE_MEMORY_FIELD_DESC);
        oprot.writeI64(struct.freeMemory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCollectionsCount()) {
        oprot.writeFieldBegin(COLLECTIONS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.collectionsCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAverageCollectionTime()) {
        oprot.writeFieldBegin(AVERAGE_COLLECTION_TIME_FIELD_DESC);
        oprot.writeDouble(struct.averageCollectionTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VirtualMachineInfoTupleSchemeFactory implements SchemeFactory {
    public VirtualMachineInfoTupleScheme getScheme() {
      return new VirtualMachineInfoTupleScheme();
    }
  }

  private static class VirtualMachineInfoTupleScheme extends TupleScheme<VirtualMachineInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VirtualMachineInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAvailableProcessors()) {
        optionals.set(0);
      }
      if (struct.isSetMaxMemory()) {
        optionals.set(1);
      }
      if (struct.isSetTotalMemory()) {
        optionals.set(2);
      }
      if (struct.isSetFreeMemory()) {
        optionals.set(3);
      }
      if (struct.isSetCollectionsCount()) {
        optionals.set(4);
      }
      if (struct.isSetAverageCollectionTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAvailableProcessors()) {
        oprot.writeI32(struct.availableProcessors);
      }
      if (struct.isSetMaxMemory()) {
        oprot.writeI64(struct.maxMemory);
      }
      if (struct.isSetTotalMemory()) {
        oprot.writeI64(struct.totalMemory);
      }
      if (struct.isSetFreeMemory()) {
        oprot.writeI64(struct.freeMemory);
      }
      if (struct.isSetCollectionsCount()) {
        oprot.writeI64(struct.collectionsCount);
      }
      if (struct.isSetAverageCollectionTime()) {
        oprot.writeDouble(struct.averageCollectionTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VirtualMachineInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.availableProcessors = iprot.readI32();
        struct.setAvailableProcessorsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxMemory = iprot.readI64();
        struct.setMaxMemoryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalMemory = iprot.readI64();
        struct.setTotalMemoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.freeMemory = iprot.readI64();
        struct.setFreeMemoryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.collectionsCount = iprot.readI64();
        struct.setCollectionsCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.averageCollectionTime = iprot.readDouble();
        struct.setAverageCollectionTimeIsSet(true);
      }
    }
  }

}

