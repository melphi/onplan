//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof com === 'undefined') {
  com = {};
}
if (typeof com.onplan === 'undefined') {
  com.onplan = {};
}
if (typeof com.onplan.client === 'undefined') {
  com.onplan.client = {};
}
if (typeof com.onplan.client.domain === 'undefined') {
  com.onplan.client.domain = {};
}
com.onplan.client.domain.VirtualMachineInfo = module.exports.VirtualMachineInfo = function(args) {
  this.availableProcessors = null;
  this.maxMemory = null;
  this.totalMemory = null;
  this.freeMemory = null;
  this.collectionsCount = null;
  this.averageCollectionTime = null;
  if (args) {
    if (args.availableProcessors !== undefined && args.availableProcessors !== null) {
      this.availableProcessors = args.availableProcessors;
    }
    if (args.maxMemory !== undefined && args.maxMemory !== null) {
      this.maxMemory = args.maxMemory;
    }
    if (args.totalMemory !== undefined && args.totalMemory !== null) {
      this.totalMemory = args.totalMemory;
    }
    if (args.freeMemory !== undefined && args.freeMemory !== null) {
      this.freeMemory = args.freeMemory;
    }
    if (args.collectionsCount !== undefined && args.collectionsCount !== null) {
      this.collectionsCount = args.collectionsCount;
    }
    if (args.averageCollectionTime !== undefined && args.averageCollectionTime !== null) {
      this.averageCollectionTime = args.averageCollectionTime;
    }
  }
};
com.onplan.client.domain.VirtualMachineInfo.prototype = {};
com.onplan.client.domain.VirtualMachineInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.availableProcessors = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.maxMemory = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.totalMemory = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.freeMemory = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.collectionsCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.averageCollectionTime = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.onplan.client.domain.VirtualMachineInfo.prototype.write = function(output) {
  output.writeStructBegin('VirtualMachineInfo');
  if (this.availableProcessors !== null && this.availableProcessors !== undefined) {
    output.writeFieldBegin('availableProcessors', Thrift.Type.I32, 1);
    output.writeI32(this.availableProcessors);
    output.writeFieldEnd();
  }
  if (this.maxMemory !== null && this.maxMemory !== undefined) {
    output.writeFieldBegin('maxMemory', Thrift.Type.I64, 2);
    output.writeI64(this.maxMemory);
    output.writeFieldEnd();
  }
  if (this.totalMemory !== null && this.totalMemory !== undefined) {
    output.writeFieldBegin('totalMemory', Thrift.Type.I64, 3);
    output.writeI64(this.totalMemory);
    output.writeFieldEnd();
  }
  if (this.freeMemory !== null && this.freeMemory !== undefined) {
    output.writeFieldBegin('freeMemory', Thrift.Type.I64, 4);
    output.writeI64(this.freeMemory);
    output.writeFieldEnd();
  }
  if (this.collectionsCount !== null && this.collectionsCount !== undefined) {
    output.writeFieldBegin('collectionsCount', Thrift.Type.I64, 5);
    output.writeI64(this.collectionsCount);
    output.writeFieldEnd();
  }
  if (this.averageCollectionTime !== null && this.averageCollectionTime !== undefined) {
    output.writeFieldBegin('averageCollectionTime', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.averageCollectionTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

